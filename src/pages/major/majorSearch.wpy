<template>
  <view style="border-top:1rpx solid #e0e0e0">
    <view class="search-line">
      <image class="search-line-img" src="../../resource/img/collegeMain_search_back.png"/>
      <input class="search-line-input" placeholder="搜索专业" value="{{searchValue}}" confirm-type="search" bindinput="majorInput"/>
    </view>
    <view class="college-line" wx:for="{{majorShowList}}" wx:for-item="item" >
      <view @tap="majorSelect({{item}})">{{item.majorName}}</view>
    </view>
    <view class="search-title">
        <view class="search-title-text">
            搜索历史
        </view>
        <image class="search-title-icon" src="../../resource/img/collegeSearch_delete.png" @tap="deleteStorge"/>
    </view>
    <view class="college-storage-box">
        <view class="college-storage" wx:for="{{searchRecordMajor}}" wx:for-item="item">
            <view @tap="majorStorage({{item}})">{{item.majorName}}</view>
        </view>
    </view>
  </view>
</template>
<script>
const { $Toast } = require('../../iview/base/index');
import wepy from 'wepy';
import common from '../../mixins/common';
export default class collegeSearch extends wepy.page {
    config = {
        navigationBarTitleText: '搜索专业',
        usingComponents: {
            'i-button': '../../iview/button/index',
            'i-toast': '../../iview/toast/index'
        }
    }
    components = {}
    mixins = [
        common
    ]
    data = {
        isloaded: true,
        avatarUrl: '',
        searchValue: '',
        requestUrl: '',
        globalData: '',
        majorNameList: [],
        majorShowList: [],
        collegeId: null,
        searchRecordMajor: [],
        tagList: []
    }
    computed = {}
    methods = {
        majorInput (e) {
            let self = this;
            self.majorShowList = [];
            if (e.detail.value.length === 0 || e.detail.value.length === 1) {
            }
            else {
                self.majorNameList.forEach(function(major) {
                    if (major.majorName.indexOf(e.detail.value) > -1) {
                        self.majorShowList.push(major);
                    }
                });
                self.$apply();
            }
        },
        async majorSelect (major) {
            let self = this;
            let searchRecordMajor = self.searchRecordMajor;
            if (searchRecordMajor.length < 8) {
                searchRecordMajor.unshift(major);
            }
            else {
                searchRecordMajor.pop();
                searchRecordMajor.unshift(major);
            }
            console.log('major', searchRecordMajor);
            wx.setStorageSync('searchRecordMajor', searchRecordMajor);
            wepy.redirectTo({
                url: `/pages/major/majorDetail?mid=${major.mid}`
            });
        },
        async majorStorage (major) {
            // let self = this;
            // let searchRecordMajor = self.searchRecordMajor;
            // searchRecordMajor.splice(searchRecordMajor.indexOf(major), 1);
            // if (searchRecordMajor.length < 8) {
            //     searchRecordMajor.unshift(searchRecordMajor);
            // }
            // else {
            //     searchRecordMajor.pop();
            //     searchRecordMajor.unshift(searchRecordMajor);
            // }
            // wx.setStorageSync('searchRecordMajor', searchRecordMajor);
            wepy.redirectTo({
                url: `/pages/major/majorDetail?mid=${major.mid}`
            });
        },
        deleteStorge (e) {
            var self = this;
            self.searchRecordMajor = [];
            self.$apply();
            wx.setStorageSync('searchRecordMajor', self.searchRecordMajor);
        }
    }
    events = {}
    async onLoad() {
        let self = this;
        self.isloaded = true;
        self.requestUrl = this.$parent.globalData.requestUrl;
        self.globalData = this.$parent.globalData;
        self.searchRecordMajor = wx.getStorageSync('searchRecordMajor') || [];
        await this.requestMajor();
        self.$apply();
    }
    async onShow () {
        let self = this;
        self.majorShowList = [];
        self.searchValue = '';
        self.$apply();
    }
    async requestMajor () {
        let self = this;
        const resMajor = await this.request({
            url: self.requestUrl + '/gkzywx/majorInfoBake/getMajorSearchVoList.do',
            method: 'POST',
            header: {
                'content-type': 'application/json',
                'cookie': 'JSESSIONID=' + this.$parent.globalData.sessionId
            },
            data: {
            }
        }, false).catch(err => {
            console.log(err);
        });
        if (resMajor.status === 0) {
            self.majorNameList = resMajor.data;
        }
        else {
            $Toast({
                content: resMajor.msg,
                type: 'error'
            });
        }
    }
}
</script>
<style lang="less" scoped> 
    //搜索框
    .search-line {
        width:653rpx;
        height:67rpx;
        margin:20rpx auto 0;
        position: relative;
    }
    .search-line-img {
        width:100%;
        height:100%;
    }
    .search-line-input {
        top:3.5rpx;
        width: 600rpx;
        height: 60rpx;
        position: absolute;
        left:100rpx;
        font-size:24rpx;
        line-height: 60rpx;
        color: #bababa;
        letter-spacing: 5rpx;
    }
    // 搜索题目
    .search-title {
    width: 100%;
    height: 32rpx;
    margin-top: 40rpx;
    display:flex;
    }
    .search-title-text {
    font-size:28rpx;
    color:#666666;
    margin-left:45rpx;
    }
    .search-title-icon {
    width:28rpx;
    height:32rpx;
    margin-left:508rpx;
    }
    //匹配结果
    .college-line {
    width:100%;
    height:94rpx;
    border-bottom:1rpx solid #f0eeee;
    color:#666666;
    font-size:32rpx;
    line-height: 94rpx;
    padding-left:60rpx;
    }
    // 缓存
    .college-storage-box {
        width:690rpx;
        padding-left:30rpx;
        padding-right:46rpx;
        margin-top:35rpx;
        display:flex;
        flex-wrap: wrap;
    }
    .college-storage {
        background-color: #f8f8f8;
        height:62rpx;
        border-radius: 6rpx;
        text-align: center;
        color:#666666;
        font-size:25rpx;
        margin-right:20rpx;
        padding-left:30rpx;
        padding-right:30rpx;
        line-height:62rpx;
        margin-bottom:30rpx;
    }
//标签区域
.tag-box {
    width:690rpx;
    max-height:270rpx;
    margin:20rpx auto 0;
    display:flex;
    flex-direction: row;
    flex-wrap: wrap;
    overflow: hidden;
}
.tag-all {
    width:132rpx;
    height:63rpx;
    background-color: #fdf2db;
    border-radius:32rpx;
    font-size:26rpx;
    color:rgb(155, 155, 155);
    line-height: 63rpx;
    text-align: center;
    margin-left:16rpx;
    margin-right:15rpx;
    margin-top:10rpx;
    margin-bottom:10rpx;
}
.tag-else {
    width:132rpx;
    height:63rpx;
    background-color: #fdf2db;
    color: rgb(155, 155, 155);
    border-radius:32rpx;
    font-size:26rpx;
    line-height:63rpx;
    text-align:center;
    margin-left:16rpx;
    margin-right:15rpx;
    margin-top:10rpx;
    margin-bottom:10rpx;
}
.tag-chosen {
    width:132rpx;
    height:63rpx;
    background-color: #f7a400;
    color: white;
    border-radius:32rpx;
    font-size:26rpx;
    line-height:63rpx;
    text-align:center;
    margin-left:16rpx;
    margin-right:15rpx;
    margin-top:10rpx;
    margin-bottom:10rpx;
}
</style>
